{"version":3,"sources":["component/Display.js","component/Button.js","component/ButtonPanel.js","logic/operate.js","logic/isNumber.js","logic/calculate.js","component/App.js","index.js"],"names":["Display","className","this","props","value","React","Component","Button","handleClick","clickHandler","name","orange","wide","join","trim","onClick","ButtonPanel","buttonName","operate","numberone","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","Error","isNumber","test","calculate","obj","total","next","result","includes","parseFloat","App","state","setState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18156e46.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Display.css\";\r\n\r\nclass Display extends React.Component {\r\n    static propTypes = {\r\n        value: PropTypes.string,\r\n    };\r\n    render(){\r\n        return (\r\n            <div className= \"component-display\">\r\n                <div> {this.props.value} </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Display;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends React.Component {\r\n    // static propTypes = {\r\n    //     name : PropTypes = {\r\n    //         name:PropTypes.string,\r\n    //         orange: PropTypes.bool,\r\n    //         wide:PropTypes.bool,\r\n    //         clickHandler: PropTypes.func,\r\n    //     }\r\n    // };\r\n\r\n    handleClick = () => {\r\n        this.props.clickHandler (this.props.name);\r\n    };\r\n\r\n    render () {\r\n        const className = [\r\n            \"component-button\",\r\n            this.props.orange ? \"orange\" : \"\",\r\n            this.props.wide ? \"wide\" : \"\",\r\n\r\n        ];\r\n\r\n        return (\r\n            <div className= {className.join(\" \").trim()} >\r\n                <button onClick={this.handleClick}>\r\n                    {this.props.name}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button; ","import React from \"react\";\r\nimport \"./ButtonPanel.css\";\r\nimport Button from \"./Button\";\r\n\r\nclass ButtonPanel extends React.Component {\r\n    handleClick = (buttonName) => {\r\n        this.props.clickHandler(buttonName);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className= \"component-button-panel\" >\r\n                <div>\r\n                <Button name=\"AC\" clickHandler={this.handleClick}  />\r\n                <Button name=\"+/-\" clickHandler={this.handleClick}  />\r\n                <Button name=\"%\" clickHandler={this.handleClick}  />\r\n                <Button name=\"/\" clickHandler={this.handleClick} orange />\r\n                </div>\r\n                <div>\r\n                <Button name=\"7\" clickHandler={this.handleClick}  />\r\n                <Button name=\"8\" clickHandler={this.handleClick}  />\r\n                <Button name=\"9\" clickHandler={this.handleClick}  />\r\n                <Button name=\"*\" clickHandler={this.handleClick} orange />\r\n                </div>\r\n                <div>\r\n                <Button name=\"4\" clickHandler={this.handleClick}  />\r\n                <Button name=\"5\" clickHandler={this.handleClick}  />\r\n                <Button name=\"6\" clickHandler={this.handleClick}  />\r\n                <Button name=\"-\" clickHandler={this.handleClick} orange />\r\n                </div>\r\n                <div>\r\n                <Button name=\"1\" clickHandler={this.handleClick}  />\r\n                <Button name=\"2\" clickHandler={this.handleClick}  />\r\n                <Button name=\"3\" clickHandler={this.handleClick}  />\r\n                <Button name=\"+\" clickHandler={this.handleClick}  orange />\r\n                </div>\r\n                <div>\r\n                <Button name=\"0\" clickHandler={this.handleClick} wide />\r\n                <Button name=\".\" clickHandler={this.handleClick}  />\r\n                <Button name=\"=\" clickHandler={this.handleClick} orange />\r\n                \r\n                </div>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonPanel;","import Big from \"big.js\";\r\n\r\nexport default function operate(numberone, numberTwo, operation){\r\n    const one = Big(numberone || \"0\");\r\n    const two = Big(numberTwo || (operation === \"/\" || operation === \"*\"? \"1\" : \"0\" )); //if dividing or multiplying, then I maintains current value in cases of null\r\n    if(operation === \"+\"){\r\n        return one.plus(two).toString();\r\n    }\r\n    if(operation === \"-\"){\r\n        return one.minus(two).toString();\r\n    }\r\n    if(operation === \"*\"){\r\n        return one.times(two).toString();\r\n    }\r\n    if(operation === \"/\"){\r\n        if(two === \"0\"){\r\n            alert(\"Divide by 0 error\");\r\n            return \"0\";\r\n        }\r\n        else{\r\n            return one.div(two).toString();\r\n        }\r\n    }\r\n    throw Error('Unknown operation');\r\n}","const isNumber = (buttonName) => {\r\n    \r\n    return /[0-9]+/.test(buttonName) ;\r\n}\r\n\r\nexport default isNumber;","import Big from \"big.js\";\r\n\r\nimport operate from \"./operate\";\r\nimport isNumber from \"./isNumber\";\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:String      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nexport default function calculate(obj, buttonName) {\r\n  if (buttonName === \"AC\") {\r\n    return {\r\n      total: null,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  if (isNumber(buttonName)) {\r\n    if (buttonName === \"0\" && obj.next === \"0\") {\r\n      return {};\r\n    }\r\n    // If there is an operation, update next\r\n    if (obj.operation) {\r\n      if (obj.next) {\r\n        return { next: obj.next + buttonName };\r\n      }\r\n      return { next: buttonName };\r\n    }\r\n    // If there is no operation, update next and clear the value\r\n    if (obj.next) {\r\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\r\n      return {\r\n        next,\r\n        total: null,\r\n      };\r\n    }\r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    };\r\n  }\r\n\r\n  if (buttonName === \"%\") {\r\n    if (obj.operation && obj.next) {\r\n      const result = operate(obj.total, obj.next, obj.operation);\r\n      return {\r\n        total: Big(result)\r\n          .div(Big(\"100\"))\r\n          .toString(),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    }\r\n    if (obj.next) {\r\n      return {\r\n        next: Big(obj.next)\r\n          .div(Big(\"100\"))\r\n          .toString(),\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  if (buttonName === \".\") {\r\n    if (obj.next) {\r\n      // ignore a . if the next number already has one\r\n      if (obj.next.includes(\".\")) {\r\n        return {};\r\n      }\r\n      return { next: obj.next + \".\" };\r\n    }\r\n    return { next: \"0.\" };\r\n  }\r\n\r\n  if (buttonName === \"=\") {\r\n    if (obj.next && obj.operation) {\r\n      return {\r\n        total: operate(obj.total, obj.next, obj.operation),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    } else {\r\n      // '=' with no operation, nothing to do\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if (buttonName === \"+/-\") {\r\n    if (obj.next) {\r\n      return { next: (-1 * parseFloat(obj.next)).toString() };\r\n    }\r\n    if (obj.total) {\r\n      return { total: (-1 * parseFloat(obj.total)).toString() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  // Button must be an operation\r\n\r\n  // When the user presses an operation button without having entered\r\n  // a number first, do nothing.\r\n  // if (!obj.next && !obj.total) {\r\n  //   return {};\r\n  // }\r\n\r\n  // User pressed an operation button and there is an existing operation\r\n  if (obj.operation) {\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    };\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed a number yet, just save the operation\r\n  if (!obj.next) {\r\n    return { operation: buttonName };\r\n  }\r\n\r\n  // save the operation and shift 'next' into 'total'\r\n  return {\r\n    total: obj.next,\r\n    next: null,\r\n    operation: buttonName,\r\n  };\r\n}","import React from'react';\r\nimport Display from \"./Display\";\r\nimport ButtonPanel from \"./ButtonPanel\";\r\nimport calculate from \"../logic/calculate\";\r\nclass App extends React.Component {\r\n    state = {\r\n        total: null,\r\n        next: null,\r\n        operation: null,\r\n    };\r\n    handleClick = (buttonName)=>{\r\n        this.setState(calculate(this.state,buttonName));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Display value= {this.state.next || this.state.total || \"0\"} />\r\n                <ButtonPanel clickHandler={this.handleClick}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './component/App';\r\nimport \"./index.css\";\r\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\r\n\r\nReactDOM.render(<App/>,document.getElementById(\"root\"));"],"sourceRoot":""}